{"version":3,"file":"use-color-thief.modern.js","sources":["../src/index.ts"],"sourcesContent":["import { useState, useEffect, MutableRefObject } from 'react';\nimport ColorThief from 'colorthief';\n\nexport type ColorThiefColor = Array<number> | string | null;\n\nexport interface ColorThiefOptions {\n  format?: string;\n  quality?: number;\n  colorCount?: number;\n}\n\nexport interface ColorThiefOutput {\n  color: ColorThiefColor;\n  palette: Array<ColorThiefColor>;\n}\n\n/**\n * Converts 3 rgb integers into a hex string\n *\n * @param {number} r The red component of an rgb color\n * @param {number} g The green component of an rgb color\n * @param {number} b The blue component of an rgb color\n * @returns {string} A color in hex string format.\n */\nconst rgbToHex = (r: number, g: number, b: number): string => {\n  const toHex = (c: number): string => c.toString(16).padStart(2, '0');\n  return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n};\n\n/**\n * Gets a primary color and a color palette from an image ref or url\n *\n * @param {string | MutableRefObject<HTMLImageElement>} source The source url or image ref to grab colors from\n * @param {ColorThiefOptions} options The second number to add.\n * @returns {ColorThiefOutput} The resulting color and palette from the input image\n */\nconst useColorThief = (\n  source: string | MutableRefObject<HTMLImageElement>,\n  options: ColorThiefOptions\n): ColorThiefOutput => {\n  const { format = 'rgb', quality = 10, colorCount = 10 } = options;\n\n  const [url, setUrl] = useState('');\n  const [output, setOutput] = useState({\n    color: null,\n    palette: null,\n  });\n\n  // Get the url to use for generating a palette\n  useEffect(() => {\n    if (source) {\n      if (typeof source === 'string' && source.length) {\n        setUrl(source);\n      } else {\n        const { current } = <MutableRefObject<HTMLImageElement>>source;\n        if (\n          current &&\n          current instanceof HTMLImageElement &&\n          // When no url is passed, getting the 'src' attribute returns the page url\n          current.src !== window.location.href\n        ) {\n          const setCurrentSrc = () => {\n            if (current.src) {\n              setUrl(current.src);\n            }\n          };\n          setCurrentSrc();\n\n          const observer = new MutationObserver(setCurrentSrc);\n          observer.observe(current, { attributes: true });\n          return () => {\n            observer.disconnect();\n          };\n        }\n      }\n    }\n\n    return () => {};\n  }, [source]);\n\n  // When the image url changes, update the color and palette\n  useEffect(() => {\n    let isCurrent = true;\n\n    if (url) {\n      const img = new Image();\n      img.crossOrigin = 'anonymous';\n      img.referrerPolicy = 'no-referrer';\n\n      const handleImageLoad = () => {\n        if (isCurrent) {\n          const colorThief = new ColorThief();\n\n          let color = colorThief.getColor(img, quality);\n          let palette = colorThief.getPalette(img, colorCount, quality);\n\n          if (format === 'hex') {\n            const [r, g, b] = color;\n            color = rgbToHex(r, g, b);\n            palette = palette.map(([pr, pg, pb]) => rgbToHex(pr, pg, pb));\n          }\n\n          setOutput({ color, palette });\n\n          img.removeEventListener('load', handleImageLoad);\n        }\n      };\n\n      img.addEventListener('load', handleImageLoad);\n      img.src = url;\n    }\n\n    return () => {\n      isCurrent = false;\n    };\n  }, [url, colorCount, quality, format]);\n\n  return output;\n};\n\nexport default useColorThief;\n"],"names":["rgbToHex","r","g","b","toHex","c","toString","padStart","source","options","format","quality","colorCount","url","setUrl","useState","output","setOutput","color","palette","useEffect","length","current","HTMLImageElement","src","window","location","href","setCurrentSrc","observer","MutationObserver","observe","attributes","disconnect","isCurrent","img","Image","crossOrigin","referrerPolicy","handleImageLoad","colorThief","ColorThief","getColor","getPalette","map","pr","pg","pb","removeEventListener","addEventListener"],"mappings":"0EAwBA,MAAMA,EAAW,CAACC,EAAWC,EAAWC,KACtC,MAAMC,EAASC,GAAsBA,EAAEC,SAAS,IAAIC,SAAS,EAAG,KAChE,UAAWH,EAAMH,KAAKG,EAAMF,KAAKE,EAAMD,oBAUnB,CACpBK,EACAC,KAEA,MAAMC,OAAEA,EAAS,MAAXC,QAAkBA,EAAU,GAA5BC,WAAgCA,EAAa,IAAOH,GAEnDI,EAAKC,GAAUC,EAAS,KACxBC,EAAQC,GAAaF,EAAS,CACnCG,MAAO,KACPC,QAAS,OAwEX,OApEAC,EAAU,KACR,GAAIZ,EACF,GAAsB,iBAAXA,GAAuBA,EAAOa,OACvCP,EAAON,OACF,CACL,MAAMc,QAAEA,GAAgDd,EACxD,GACEc,GACAA,aAAmBC,kBAEnBD,EAAQE,MAAQC,OAAOC,SAASC,KAChC,CACA,MAAMC,EAAgB,KAChBN,EAAQE,KACVV,EAAOQ,EAAQE,MAGnBI,IAEA,MAAMC,EAAW,IAAIC,iBAAiBF,GAEtC,OADAC,EAASE,QAAQT,EAAS,CAAEU,YAAY,IACjC,KACLH,EAASI,eAMjB,MAAO,QACN,CAACzB,IAGJY,EAAU,KACR,IAAIc,GAAY,EAEhB,GAAIrB,EAAK,CACP,MAAMsB,EAAM,IAAIC,MAChBD,EAAIE,YAAc,YAClBF,EAAIG,eAAiB,cAErB,MAAMC,EAAkB,KACtB,GAAIL,EAAW,CACb,MAAMM,EAAa,IAAIC,EAEvB,IAAIvB,EAAQsB,EAAWE,SAASP,EAAKxB,GACjCQ,EAAUqB,EAAWG,WAAWR,EAAKvB,EAAYD,GAErD,GAAe,QAAXD,EAAkB,CACpB,MAAOT,EAAGC,EAAGC,GAAKe,EAClBA,EAAQlB,EAASC,EAAGC,EAAGC,GACvBgB,EAAUA,EAAQyB,IAAI,EAAEC,EAAIC,EAAIC,KAAQ/C,EAAS6C,EAAIC,EAAIC,IAG3D9B,EAAU,CAAEC,MAAAA,EAAOC,QAAAA,IAEnBgB,EAAIa,oBAAoB,OAAQT,KAIpCJ,EAAIc,iBAAiB,OAAQV,GAC7BJ,EAAIX,IAAMX,EAGZ,MAAO,KACLqB,GAAY,IAEb,CAACrB,EAAKD,EAAYD,EAASD,IAEvBM"}