{"version":3,"file":"use-color-thief.modern.js","sources":["../src/index.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport ColorThief from 'colorthief/dist/color-thief.mjs';\n\nconst rgbToHex = (r, g, b) => {\n  const toHex = (c) => c.toString(16).padStart(2, '0');\n  return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n};\n\nconst useColorThief = (\n  source,\n  { format = 'rgb', quality = 10, colorCount = 10 } = {}\n) => {\n  const [url, setUrl] = useState('');\n  const [output, setOutput] = useState({\n    color: null,\n    palette: null,\n  });\n\n  // Get the url to use for generating a palette\n  useEffect(() => {\n    if (source) {\n      if (\n        source.current &&\n        source.current instanceof HTMLImageElement &&\n        // When no url is passed, getting the 'src' attribute returns the page url\n        source.current.src !== window.location.href\n      ) {\n        const setCurrentSrc = () => {\n          if (source.current.src) {\n            setUrl(source.current.src);\n          }\n        };\n        setCurrentSrc();\n\n        const observer = new MutationObserver(setCurrentSrc);\n        observer.observe(source.current, { attributes: true });\n        return () => {\n          observer.disconnect();\n        };\n      }\n      if (typeof source === 'string' && source.length) {\n        setUrl(source);\n      }\n    }\n\n    return () => {};\n  }, [source]);\n\n  // When the image url changes, update the color and palette\n  useEffect(() => {\n    let isCurrent = true;\n\n    if (url) {\n      const img = new Image();\n      img.crossOrigin = 'anonymous';\n      img.referrerPolicy = 'no-referrer';\n\n      const handleImageLoad = () => {\n        if (isCurrent) {\n          const colorThief = new ColorThief();\n\n          let color = colorThief.getColor(img, quality);\n          let palette = colorThief.getPalette(img, colorCount, quality);\n\n          if (format === 'hex') {\n            color = rgbToHex(...color);\n            palette = palette.map((rgb) => rgbToHex(...rgb));\n          }\n\n          setOutput({ color, palette });\n\n          img.removeEventListener('load', handleImageLoad);\n        }\n      };\n\n      img.addEventListener('load', handleImageLoad);\n      img.src = url;\n    }\n\n    return () => {\n      isCurrent = false;\n    };\n  }, [url, colorCount, quality, format]);\n\n  return output;\n};\n\nexport default useColorThief;\n"],"names":["rgbToHex","r","g","b","toHex","c","toString","padStart","source","format","quality","colorCount","url","setUrl","useState","output","setOutput","color","palette","useEffect","current","HTMLImageElement","src","window","location","href","setCurrentSrc","observer","MutationObserver","observe","attributes","disconnect","length","isCurrent","img","Image","crossOrigin","referrerPolicy","handleImageLoad","colorThief","ColorThief","getColor","getPalette","map","rgb","removeEventListener","addEventListener"],"mappings":"+FAGA,MAAMA,EAAW,CAACC,EAAGC,EAAGC,KACtB,MAAMC,EAASC,GAAMA,EAAEC,SAAS,IAAIC,SAAS,EAAG,KAChD,MAAQ,IAAGH,EAAMH,KAAKG,EAAMF,KAAKE,EAAMD,oBAGnB,CACpBK,GACEC,OAAAA,EAAS,MAAOC,QAAAA,EAAU,GAAIC,WAAAA,EAAa,IAAO,MAEpD,MAAOC,EAAKC,GAAUC,EAAS,KACxBC,EAAQC,GAAaF,EAAS,CACnCG,MAAO,KACPC,QAAS,OAqEX,OAjEAC,EAAU,KACR,GAAIX,EAAQ,CACV,GACEA,EAAOY,SACPZ,EAAOY,mBAAmBC,kBAE1Bb,EAAOY,QAAQE,MAAQC,OAAOC,SAASC,KACvC,CACA,MAAMC,EAAgB,KAChBlB,EAAOY,QAAQE,KACjBT,EAAOL,EAAOY,QAAQE,MAG1BI,IAEA,MAAMC,EAAW,IAAIC,iBAAiBF,GAEtC,OADAC,EAASE,QAAQrB,EAAOY,QAAS,CAAEU,YAAY,IACxC,KACLH,EAASI,cAGS,iBAAXvB,GAAuBA,EAAOwB,QACvCnB,EAAOL,GAIX,MAAO,QACN,CAACA,IAGJW,EAAU,KACR,IAAIc,GAAY,EAEhB,GAAIrB,EAAK,CACP,MAAMsB,EAAM,IAAIC,MAChBD,EAAIE,YAAc,YAClBF,EAAIG,eAAiB,cAErB,MAAMC,EAAkB,KACtB,GAAIL,EAAW,CACb,MAAMM,EAAa,IAAIC,EAEvB,IAAIvB,EAAQsB,EAAWE,SAASP,EAAKxB,GACjCQ,EAAUqB,EAAWG,WAAWR,EAAKvB,EAAYD,GAEtC,QAAXD,IACFQ,EAAQjB,KAAYiB,GACpBC,EAAUA,EAAQyB,IAAKC,GAAQ5C,KAAY4C,KAG7C5B,EAAU,CAAEC,MAAAA,EAAOC,QAAAA,IAEnBgB,EAAIW,oBAAoB,OAAQP,KAIpCJ,EAAIY,iBAAiB,OAAQR,GAC7BJ,EAAIZ,IAAMV,EAGZ,MAAO,KACLqB,GAAY,IAEb,CAACrB,EAAKD,EAAYD,EAASD,IAEvBM"}